<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="checkBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gfGP3zSMnAAAAABJRU5ErkJggg==
</value>
  </data>
</root>